AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Transcribe Post Call Analytics - PCA UI - Indexer

Transform: AWS::Serverless-2016-10-31

Parameters:
  DataBucket:
    Type: String

  DataPrefix:
    Type: String

  AudioBucket:
    Type: String

  AudioBucketPrefix:
    Type: String

  WebUri:
    Type: String

  OutputBucketTranscribeResults:
    Type: AWS::SSM::Parameter::Value<String>
    Default: OutputBucketTranscribeResults

  OutputBucketDocResults:
    Type: AWS::SSM::Parameter::Value<String>
    Default: OutputBucketDocResults

  # NOTE: These parameters are dynamically updated during release
  BootstrapBucketBaseName:
    Type: String
    Default: aws-bigdata-blog
    Description: >-
      Base name of bootstrap S3 bucket. The region is appended to the bucket name. For example if
      you provide a base name `mybucket`, a bucket with a region suffix must exist in the region
      you are deploying (e.g. `mybucket-us-east-1`)
      The bucket contains pre-staged packaged templates and source artifacts
    # yamllint disable rule:line-length
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    # yamllint enable rule:line-length

  BootstrapS3Prefix:
    Type: String
    Default: artifacts/lca
    Description: >
      S3 prefix where the templates and source are stored under

  BootstrapVersion:
    Type: String
    Default: 0.8.9
    Description: >
      Artifacts version (semver). Used to point to a specific release in the S3
      bootstrap bucket

  StepFunctionName:
    Type: String
    Default: PostCallAnalyticsWorkflow
    Description: Name of Step Functions workflow that orchestrates this process

Resources:
  Queue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 300

  QueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref Queue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - sqs:SendMessage
          Resource: !GetAtt Queue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:s3:::${DataBucket}

  DocConversionQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 300

  DocConversionQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref DocConversionQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
            - sqs:SendMessage
          Resource: !GetAtt DocConversionQueue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:s3:::${DataBucket}

  ConfigureDataBucketRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: allow-s3-notification-config
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetBucketNotification
                - s3:PutBucketNotification
              Resource: !Sub arn:aws:s3:::${DataBucket}
        - PolicyName: set-audio-bucket-cors
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:PutBucketCORS
              Resource:
                - !Sub arn:aws:s3:::${AudioBucket}
                - !Sub arn:aws:s3:::${DataBucket}

  ConfigureDataBucketFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:  ../pca-ui/src/lambda
      Handler: bucket.handler
      Runtime: nodejs14.x
      Role: !GetAtt ConfigureDataBucketRole.Arn
      Environment:
        Variables:
          StackName: !Ref AWS::StackName

  ConfigureDataBucket:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt ConfigureDataBucketFunction.Arn
      BucketName: !Ref DataBucket
      Prefix: !Ref DataPrefix
      TranscribeResultsPrefix: !Ref OutputBucketTranscribeResults
      QueueArn: !GetAtt Queue.Arn
      DocConversionQueueArn: !GetAtt DocConversionQueue.Arn
      AudioBucket: !Ref AudioBucket
      AudioBucketPrefix: !Ref AudioBucketPrefix
      WebUri: !Ref WebUri

  Table:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: TK
          AttributeType: 'N'
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: SK
              KeyType: HASH
            - AttributeName: TK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True

  IndexFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../pca-ui/src/lambda
      Handler: index.handler
      Timeout: 300
      Environment:
        Variables:
          TableName: !Ref Table
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - S3ReadPolicy:
            BucketName: !Ref DataBucket
      Runtime: nodejs14.x

  DocConversionFunction:
    Type: "AWS::Serverless::Function"
    DependsOn: CodeBuildRun
    Properties:
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JSONDocECRRepository}:${BootstrapVersion}"
      Timeout: 300
      Environment:
        Variables:
          OutputBucket: !Ref DataBucket
          OutputBucketPrefix: !Ref OutputBucketDocResults
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DocConversionQueue.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DataBucket

  InputBucketTriggerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri:  ../pca-ui/src/lambda
      Handler: input_bucket_trigger.handler
      Timeout: 300
      Environment:
        Variables:
          TableName: !Ref Table
          AudioBucketPrefix: !Ref AudioBucketPrefix
          DataPrefix: !Ref DataPrefix
      Events:
        StandardEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - "Object Created"
              source:
                - aws.s3
              detail:
                bucket:
                  name:
                    - !Ref AudioBucket
        StepFunctionChange:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.states"
              detail-type:
                - "Step Functions Execution Status Change"
              detail:
                stateMachineArn:
                  - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StepFunctionName}
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref Table
      - S3ReadPolicy:
          BucketName: !Ref AudioBucket
      - Statement:
        - Effect: "Allow"
          Action: 
            - "states:GetExecutionHistory"
          Resource: 
          - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${StepFunctionName}:*
      Runtime: nodejs14.x

  ##########################################################################
  # CodeBuild to build JSON to Doc conversion image
  ##########################################################################

  JSONDocECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow Amazon ECR read access to the users of this AWS account"
            Effect: Allow
            Principal:
              AWS:
                - !Sub ${AWS::AccountId}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"

  EcrImagesDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: deleteEcrImages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/\
                    ${JSONDocECRRepository}"
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - ecr:BatchDeleteImage

  EcrImagesDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt EcrImagesDeleteLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          client = boto3.client("ecr")
          def delete_ecr_images(repository_name):
              print(f"Deleting images in ECR repo {repository_name}")
              list_image_paginator = client.get_paginator("list_images")
              image_filter = {"tagStatus": "ANY"}
              list_response_iterator = list_image_paginator.paginate(
                  repositoryName=repository_name, filter=image_filter,
              )
              # Iterate over responses and remove untagged images
              for list_response in list_response_iterator:
                  images = list_response.get("imageIds", [])
                  if images:
                      print(f"Deleting images: {images}")
                      delete_response = client.batch_delete_image(
                          repositoryName=repository_name, imageIds=images,
                      )
                      if delete_response.get("failures"):
                          print(f"Delete failures: {delete_response.get('failures')}")
                      else:
                          print("Done")
          def lambda_handler(event, context):
              print(event)
              status = cfnresponse.SUCCESS
              response_data = {}
              reason = "Success"
              if event["RequestType"] == "Delete":
                  try:
                      repository_name = event["ResourceProperties"]["RepositoryName"]
                      delete_ecr_images(repository_name)
                      response_data["RepositoryName"] = repository_name
                  except Exception as e:
                      print(e)
                      reason = f"Exception thrown: {e}"
                      status = cfnresponse.FAILED
              cfnresponse.send(event, context, status, response_data, reason=reason)

  EcrImagesDelete:
    Type: Custom::EcrImagesDelete
    Properties:
      ServiceToken: !GetAtt EcrImagesDeleteLambda.Arn
      RepositoryName: !Ref JSONDocECRRepository

  JSONDocCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub "arn:aws:s3:::${BootstrapBucketBaseName}"
                  - !Sub "arn:aws:s3:::${BootstrapBucketBaseName}/\
                    ${BootstrapS3Prefix}/*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:ListBucket
              - Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:\
                    /aws/codebuild/*:*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/\
                  ${JSONDocECRRepository}"
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              ECR do not support resource-level permissions for GetAuthorizationToken and therefore
              cannot be specificed directly.

  JSONDocCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: !Sub >-
        Builds docker images : ${AWS::StackName}
      ServiceRole: !Ref JSONDocCodeBuildServiceRole
      EncryptionKey: alias/aws/s3
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Location:
          !Sub "arn:aws:s3:::${BootstrapBucketBaseName}/${BootstrapS3Prefix}/\
          ${BootstrapVersion}/json-to-docx.zip"
        Type: S3
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo ${SOURCE_CODE_LOCATION}
                - echo `pwd`
                - echo `ls -lhrt`
                - echo Logging in to Amazon ECR...
                - >
                  aws ecr get-login-password --region $AWS_DEFAULT_REGION |
                  docker login --username AWS
                  --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Building JSON to DocX container image
                - echo `pwd`
                - docker build -t "${REPOSITORY_URI}:${IMAGE_TAG}" .
            post_build:
              commands:
                - echo Build completed on `date`
                - echo "Pushing Docker image to ECR"
                - docker push "${REPOSITORY_URI}:${IMAGE_TAG}"

      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}\
              .amazonaws.com/${JSONDocECRRepository}"
          - Name: IMAGE_TAG
            Value: !Ref BootstrapVersion
          - Name: SOURCE_CODE_LOCATION
            Value: !Sub "${BootstrapBucketBaseName}/\
              ${BootstrapS3Prefix}/${BootstrapVersion}"
      TimeoutInMinutes: 10

  LambdaCodeBuildStartBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt JSONDocCodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:\
                    /aws/lambda/*"
        # Used by custom resource helper poller
        # https://github.com/aws-cloudformation/custom-resource-helper
        - PolicyName: CustomResourcePoller
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:
                  - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:\
                    ${AWS::AccountId}:rule/*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:\
                    ${AWS::AccountId}:function:*"

  CodeBuildRun:
    Type: Custom::CodeBuildRun
    Properties:
      ServiceToken: !GetAtt LambdaCodeBuildStartBuild.Arn
      BuildProjectName: !Ref JSONDocCodeBuildProject
      # pass code location to support upgrades
      CodeLocation:
        !Sub "arn:aws:s3:::${BootstrapBucketBaseName}/${BootstrapS3Prefix}/\
        ${BootstrapVersion}/json-to-docx.zip"

  LambdaCodeBuildStartBuild:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaCodeBuildStartBuildExecutionRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 128
      Handler: lambda_start_codebuild.handler
      CodeUri: ../pca-ui/src/utils/start_codebuild
      Description: This AWS Lambda Function kicks off a code build job.
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired

Outputs:
  TableName:
    Value: !Ref Table

  RolesForKMSKey:
    Value: !Join
      - ', '
      - - !Sub '"${IndexFunctionRole.Arn}"'
        - !Sub '"${ConfigureDataBucketRole.Arn}"'